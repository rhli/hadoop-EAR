<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- Do not modify this file directly.  Instead, copy entries that you -->
<!-- wish to modify from this file into hdfs-site.xml and change them -->
<!-- there.  If hdfs-site.xml does not already exist, create it.      -->

<configuration>

<property>
  <name>dfs.namenode.logging.level</name>
  <value>info</value>
  <description>The logging level for dfs namenode. Other values are "dir"(trac
e namespace mutations), "block"(trace block under/over replications and block
creations/deletions), or "all".</description>
</property>

<property>
  <name>dfs.access.time.touchable</name>
  <value>true</value>
  <description> This branch of HDFS supports touch changing file accessTime.</description>
</property>

<property>
  <name>dfs.secondary.http.address</name>
  <value>0.0.0.0:50090</value>
  <description>
    The secondary namenode http server address and port.
    If the port is 0 then the server will start on a free port.
  </description>
</property>

<property>
  <name>dfs.datanode.address</name>
  <value>0.0.0.0:50010</value>
  <description>
    The address where the datanode server will listen to.
    If the port is 0 then the server will start on a free port.
  </description>
</property>

<property>
  <name>dfs.datanode.http.address</name>
  <value>0.0.0.0:50075</value>
  <description>
    The datanode http server address and port.
    If the port is 0 then the server will start on a free port.
  </description>
</property>

<property>
  <name>dfs.datanode.ipc.address</name>
  <value>0.0.0.0:50020</value>
  <description>
    The datanode ipc server address and port.
    If the port is 0 then the server will start on a free port.
  </description>
</property>

<property>
  <name>dfs.datanode.handler.count</name>
  <value>3</value>
  <description>The number of server threads for the datanode.</description>
</property>

<property>
  <name>dfs.http.address</name>
  <value>0.0.0.0:50070</value>
  <description>
    The address and the base port where the dfs namenode web ui will listen on.
    If the port is 0 then the server will start on a free port.
  </description>
</property>

<property>
  <name>dfs.https.enable</name>
  <value>false</value>
  <description>Decide if HTTPS(SSL) is supported on HDFS
  </description>
</property>

<property>
  <name>dfs.https.need.client.auth</name>
  <value>false</value>
  <description>Whether SSL client certificate authentication is required
  </description>
</property>

<property>
  <name>dfs.https.server.keystore.resource</name>
  <value>ssl-server.xml</value>
  <description>Resource file from which ssl server keystore
  information will be extracted
  </description>
</property>

<property>
  <name>dfs.https.client.keystore.resource</name>
  <value>ssl-client.xml</value>
  <description>Resource file from which ssl client keystore
  information will be extracted
  </description>
</property>

<property>
  <name>dfs.datanode.https.address</name>
  <value>0.0.0.0:50475</value>
</property>

<property>
  <name>dfs.https.address</name>
  <value>0.0.0.0:50470</value>
</property>

 <property>
  <name>dfs.datanode.dns.interface</name>
  <value>default</value>
  <description>The name of the Network Interface from which a data node should 
  report its IP address.
  </description>
 </property>
 
<property>
  <name>dfs.datanode.dns.nameserver</name>
  <value>default</value>
  <description>The host name or IP address of the name server (DNS)
  which a DataNode should use to determine the host name used by the
  NameNode for communication and display purposes.
  </description>
 </property>
 
 
 
<property>
  <name>dfs.replication.considerLoad</name>
  <value>true</value>
  <description>Decide if chooseTarget considers the target's load or not
  </description>
</property>
<property>
  <name>dfs.default.chunk.view.size</name>
  <value>32768</value>
  <description>The number of bytes to view for a file on the browser.
  </description>
</property>

<property>
  <name>dfs.datanode.du.reserved</name>
  <value>0</value>
  <description>Reserved space in bytes per volume. Always leave this much space free for non dfs use.
  </description>
</property>

<property>
  <name>dfs.name.dir.policy</name>
  <value>0</value>
  <description>Determines the DFS name node directory policy. 
    0 - No enforcement
    1 - Enforce that there should be at least two copies and they must be on 
        different devices
    2 - Enforce that there should be at least two copies on different devices
        and at least one must be on an NFS device
  </description>
</property>

<property>
  <name>dfs.name.dir</name>
  <value>${hadoop.tmp.dir}/dfs/name</value>
  <description>Determines where on the local filesystem the DFS name node
      should store the name table(fsimage).  If this is a comma-delimited list
      of directories then the name table is replicated in all of the
      directories, for redundancy. </description>
</property>

<property>
  <name>dfs.name.edits.dir</name>
  <value>${dfs.name.dir}</value>
  <description>Determines where on the local filesystem the DFS name node
      should store the transaction (edits) file. If this is a comma-delimited list
      of directories then the transaction file is replicated in all of the 
      directories, for redundancy. Default value is same as dfs.name.dir
  </description>
</property>
<property>
  <name>dfs.web.ugi</name>
  <value>webuser,webgroup</value>
  <description>The user account used by the web interface.
    Syntax: USERNAME,GROUP1,GROUP2, ...
  </description>
</property>

<property>
  <name>dfs.permissions</name>
  <value>true</value>
  <description>
    If "true", enable permission checking in HDFS.
    If "false", permission checking is turned off,
    but all other behavior is unchanged.
    Switching from one parameter value to the other does not change the mode,
    owner or group of files or directories.
  </description>
</property>

<property>
  <name>dfs.permissions.supergroup</name>
  <value>supergroup</value>
  <description>The name of the group of super-users.</description>
</property>

<property>
  <name>dfs.data.dir</name>
  <value>${hadoop.tmp.dir}/dfs/data</value>
  <description>Determines where on the local filesystem an DFS data node
  should store its blocks.  If this is a comma-delimited
  list of directories, then data will be stored in all named
  directories, typically on different devices.
  Directories that do not exist are ignored.
  </description>
</property>

<property>
  <name>dfs.datadir.confpath</name>
  <value></value>
  <description>Determines where on the local filesystem on the DFS data node
  to locate the config file with the list of working directories. This is an
  absolute path to that file and the data is stored in a new line deliminated
  file. This allows for a dynamic list of directories without modifying the 
  actual config file itself.
  </description>
</property>

<property>
  <name>dfs.replication</name>
  <value>3</value>
  <description>Default block replication. 
  The actual number of replications can be specified when the file is created.
  The default is used if replication is not specified in create time.
  </description>
</property>

<property>
  <name>dfs.replication.max</name>
  <value>512</value>
  <description>Maximal block replication. 
  </description>
</property>

<property>
  <name>dfs.replication.min</name>
  <value>1</value>
  <description>Minimal block replication. 
  </description>
</property>

<property>
  <name>dfs.block.size</name>
  <value>67108864</value>
  <description>The default block size for new files.</description>
</property>

<property>
  <name>dfs.df.interval</name>
  <value>60000</value>
  <description>Disk usage statistics refresh interval in msec.</description>
</property>

<property>
  <name>dfs.client.block.write.retries</name>
  <value>3</value>
  <description>The number of retries for writing blocks to the data nodes, 
  before we signal failure to the application.
  </description>
</property>

<property>
  <name>dfs.blockreport.intervalMsec</name>
  <value>3600000</value>
  <description>Determines delete block reporting interval in milliseconds.</description>
</property>

<property>
  <name>dfs.fullblockreport.magnifier</name>
  <value>2</value>
  <description>Determines the full block reporting interval,
               which is magnifier times the delete block report interval.
  </description>
</property>

<property>
  <name>dfs.blockreport.initialDelay</name>  <value>0</value>
  <description>Delay for first block report in seconds.</description>
</property>

<property>
  <name>dfs.heartbeat.interval</name>
  <value>3</value>
  <description>Determines datanode heartbeat interval in seconds.</description>
</property>

<property>
  <name>dfs.namenode.handler.count</name>
  <value>10</value>
  <description>The number of server threads for the namenode.</description>
</property>

<property>
  <name>dfs.safemode.threshold.pct</name>
  <value>0.999f</value>
  <description>
    Specifies the percentage of blocks that should satisfy 
    the minimal replication requirement defined by dfs.replication.min.
    Values less than or equal to 0 mean not to start in safe mode.
    Values greater than 1 will make safe mode permanent.
  </description>
</property>

<property>
  <name>dfs.safemode.extension</name>
  <value>30000</value>
  <description>
    Determines extension of safe mode in milliseconds 
    after the threshold level is reached.
  </description>
</property>

<property>
  <name>dfs.balance.bandwidthPerSec</name>
  <value>1048576</value>
  <description>
        Specifies the maximum amount of bandwidth that each datanode
        can utilize for the balancing purpose in term of
        the number of bytes per second.
  </description>
</property>

<property>
  <name>dfs.hosts</name>
  <value></value>
  <description>Names a file that contains a list of hosts that are
  permitted to connect to the namenode. The full pathname of the file
  must be specified.  If the value is empty, all hosts are
  permitted.</description>
</property>

<property>
  <name>dfs.hosts.exclude</name>
  <value></value>
  <description>Names a file that contains a list of hosts that are
  not permitted to connect to the namenode.  The full pathname of the
  file must be specified.  If the value is empty, no hosts are
  excluded.</description>
</property> 

<property>
  <name>dfs.hosts.ignoremissing</name>
  <value></value>
  <description>Ignore missing include/exclude files.
  </description>
</property> 

<property>
  <name>dfs.max.objects</name>
  <value>0</value>
  <description>The maximum number of files, directories and blocks
  dfs supports. A value of zero indicates no limit to the number
  of objects that dfs supports.
  </description>
</property>

<property>
  <name>dfs.namenode.decommission.interval</name>
  <value>30</value>
  <description>Namenode periodicity in seconds to check if decommission is 
  complete.</description>
</property>

<property>
  <name>dfs.namenode.decommission.nodes.per.interval</name>
  <value>5</value>
  <description>The number of nodes namenode checks if decommission is complete
  in each dfs.namenode.decommission.interval.</description>
</property>

<property>
  <name>dfs.replication.interval</name>
  <value>3</value>
  <description>The periodicity in seconds with which the namenode computes 
  repliaction work for datanodes. </description>
</property>

<property>
  <name>dfs.access.time.precision</name>
  <value>3600000</value>
  <description>The access time for HDFS file is precise upto this value. 
               The default value is 1 hour. Setting a value of 0 disables
               access times for HDFS.
  </description>
</property>

<property>
  <name>dfs.support.append</name>
  <value>true</value>
  <description>
  This branch of HDFS supports reliable append/sync.
  </description>
</property>

<property>
  <name>dfs.namenode.support.allowformat</name>
  <value>true</value>
  <description>Does HDFS namenode allow itself to be formatted?
               You should consider setting this to false for any production
               cluster, to avoid any possibility of formatting a running DFS.
  </description>
</property>

<property>
  <name>dfs.image.compress</name>
  <value>false</value>
  <description>Should the dfs image be compressed?
  </description>
</property>

<property>
  <name>dfs.image.compression.codec</name>
  <value>org.apache.hadoop.io.compress.DefaultCodec</value>
  <description>If the dfs image is compressed, how should they be compressed?
               This codec has to be one that's defined in io.compression.codecs
  </description>
</property>

<property>
  <name>dfs.image.transfer.bandwidthPerSec</name>
  <value>0</value>
  <description>
        Specifies the maximum amount of bandwidth that can be utilized for 
        image transfer in term of the number of bytes per second.
        A default value of 0 indicates that throttling is disabled.
  </description>
</property>

<property>
  <name>dfs.fastcopy.file.wait_time</name>
  <value>300000</value>
  <description>The number of milliseconds FastCopy should wait for a file to be
    completed.
  </description>
</property>

<property>
  <name>dfs.fastcopy.max.datanode.errors</name>
  <value>5</value>
  <description>The maximum number of datanode errors after which FastCopy will
    stop scheduling block copy requests on that datanode. This prevents a bad
    datanode from slowing down everyone.
  </description>
</property>

<property>
  <name>dfs.fastcopy.blockRPC.pool_size</name>
  <value>5</value>
  <description>This controls the maximum number of blocks (including replicas)
    that the FastCopy client will copy concurrently per file. At times
    dfs.replication.min is less than 3 and hence we can start copying
    the next block before all 3 replicas of the first block are done.
  </description>
</property>

<property>
  <name>dfs.datanode.blkcopy.threads</name>
  <value>10</value>
  <description>This controls the maximum number of blocks that the datanode
    shall copy concurrently.
  </description>
</property>

<property>
  <name>dfs.datanode.blkcopy.wait_time</name>
  <value>300</value>
  <description>The timeout in seconds for a block copy RPC request to the
    datanode.
  </description>
</property>

<property>
  <name>dfs.datanode.blkcopy.hardlink</name>
  <value>true</value>
  <description>When a datanode performs a local block copy, whether or not to
    hardlink the block files on disk.
  </description>
</property>

<property>
  <name>dfs.fastcopy.block.wait_time</name>
  <value>300000</value>
  <description>The amount of time in ms that the Fast Copy client should wait
    for each block after the datanodes finish copying the block. This is to
    account for the lag between the block being successfully copied on the
    datanode and the block being reported to the namenode.
  </description>
</property>

<property>
  <name>dfs.datanode.socket.read.extension.timeout</name>
  <value>3000</value>
  <description>The amount of time adds to read tiemout for each hop in a 
               write pipeline for reading responses in milliseconds
  </description>
</property>

<property>
  <name>dfs.datanode.socket.write.extension.timeout</name>
  <value>5000</value>
  <description>The amount of time adds to write tiemout for each hop in a 
               write pipeline for sending packets in milliseconds
  </description>
</property>

<property>
  <name>dfs.cluster.name</name>
  <value></value>
  <description>The name for a federated hdfs cluster</description>
</property>

<property>
  <name>dfs.namemode.leasemanager.rpc.batchsize</name>
  <value>1000</value>
  <description>The size used for batching RPC calls that return many
  values. Currently only used by iterativeGetOpenFiles()</description>
</property>

<property>
  <name>dfs.client.tos.value</name>
  <value>-1</value>
  <description>The value of the IP_TOS option in socket, allowed values 
  are from 0 to 191, inclusive</description>
</property>

<property>
  <name>dfs.leaserecovery.discardlastblock.ifnosync</name>
  <value>false</value>
  <description>The flag indicating if namenode lease recovery could
  discard a file's last block that has no synced data
  </description>
</property>

<property>
  <name>dfs.safemode.leave.threads</name>
  <value>16</value>
  <description>Maximum number of threads which will be used when exiting safemode.
  </description>
</property>

<property>
  <name>dfs.name.edits.dir.minimum</name>
  <value>1</value>
  <description>Minimum number of journals to sync transactions to.
  If the number of streams is below the threshold, the NN will shut down.
  </description>
</property>

<property>
  <name>dfs.name.edits.dir.minimum.nonlocal</name>
  <value>0</value>
  <description>Minimum number of remote or shared journals to sync transactions to.
  If the number of such streams is below the threshold, the NN will shut down.
  </description>
</property>

<property>
  <name>dfs.enableHftp</name>
  <value>true</value>
  <description>Whether {listPaths|data|fileChecksum} servlets should be loaded at name node startup
  </description>
</property>

<property>
  <name>dfs.client.shutdownhook.enable</name>
  <value>true</value>
  <description>If true, the HDFS FileSystem will register a shutdown hook
    to close all file systems if a shutdown occurs.  This is the default.
    Set this to false if your application is registering its own shutdown
    hook; in this case, HDFS will not register one, so the application
    shutdown should include calling FileSystem.closeAll().
  </description>
</property>

<property>
  <name>hdfs.raid.codec.json</name>
    <value>[
{
"id" : "rs",
"num_data_blocks" : 10,
"num_parity_blocks" : 4,
"stripe_chunk_size" : -1,
"parity_repl" : 1,
"min_source_repl" : 1,
"erasure_code" : "org.apache.hadoop.raid.ReedSolomonCode",
"description" : "ReedSolomonCode code"
},
{
"id" : "xor",
"num_data_blocks" : 10,
"num_parity_blocks" : 1,
"stripe_chunk_size" : -1,
"parity_repl" : 2,
"min_source_repl" : 2,
"erasure_code" : "org.apache.hadoop.raid.XORCode",
"description" : "XORCode code"
}
]</value>
  <description>JSon string that contains all Raid codecs</description>
</property>

</configuration>
